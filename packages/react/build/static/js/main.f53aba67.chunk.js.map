{"version":3,"sources":["assets/twitter-logo.svg","constants.js","Components/LoadingIndicator/index.js","Components/SelectCharacter/index.js","Components/Arena/index.js","App.js","index.js"],"names":["CONTRACT_ADDRESS","transformCharacterData","characterData","name","imageURI","hp","toNumber","maxHp","attackDamage","LoadingIndicator","className","SelectCharacter","setCharacterNFT","useState","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","useEffect","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","nftGame","abi","console","log","getCharacters","a","getAllDefaultCharacters","charactersTxn","map","error","onCharacterMint","sender","tokenId","characterIndex","checkIfUserHasNFT","characterNFT","on","off","src","alt","length","character","index","type","disabled","onClick","characterId","mintCharacterNFT","mintTxn","wait","warn","Arena","boss","setBoss","attackState","setAttackState","showToast","setShowToast","contract","fetchBoss","getBigBoss","bossTxn","onAttackComplete","newBossHp","newPlayerHp","bossHp","playerHp","prevState","runAttackAction","attackBoss","attackTxn","setTimeout","id","value","max","TWITTER_LINK","App","rightNetwork","setRightNetwork","currentAccount","setCurrentAccount","isLoading","setIsLoading","checkIfWalletIsConnected","request","method","chainId","accounts","account","fetchNFTMetadata","provider","txn","transformedData","connectWalletAction","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f53aba67.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","const CONTRACT_ADDRESS = '0xD392097d6c896000b3993Ec6E949661A83cE40CB';\n\n/*\n * Add this method and make sure to export it on the bottom!\n */\nconst transformCharacterData = (characterData) => {\n  return {\n    name: characterData.name,\n    imageURI: characterData.imageURI,\n    hp: characterData.hp.toNumber(),\n    maxHp: characterData.maxHp.toNumber(),\n    attackDamage: characterData.attackDamage.toNumber(),\n  };\n};\n\nexport { CONTRACT_ADDRESS, transformCharacterData };\n","import React from 'react';\nimport './LoadingIndicator.css';\n\nconst LoadingIndicator = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n","import React, { useEffect, useState } from 'react';\nimport './SelectCharacter.css';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport nftGame from '../../utils/NftGame.json';\nimport LoadingIndicator from '../LoadingIndicator';\n\nconst SelectCharacter = ({ setCharacterNFT }) => {\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null);\n  const [mintingCharacter, setMintingCharacter] = useState(false);\n\n  // UseEffect\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        nftGame.abi,\n        signer\n      );\n\n      /*\n       * This is the big difference. Set our gameContract in state.\n       */\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []);\n\n  useEffect(() => {\n    const getCharacters = async () => {\n      try {\n        console.log('Getting contract characters to mint');\n\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n        console.log('charactersTxn:', charactersTxn);\n\n        const characters = charactersTxn.map((characterData) =>\n          transformCharacterData(characterData)\n        );\n\n        setCharacters(characters);\n      } catch (error) {\n        console.error('Something went wrong fetching characters:', error);\n      }\n    };\n\n    /*\n     * Add a callback method that will fire when this event is received\n     */\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\n      console.log(\n        `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n      );\n      console.log(\n        `See your NFT here: https://testnets.opensea.io/assets/${gameContract}/${tokenId.toNumber()}`\n      );\n\n      /*\n       * Once our character NFT is minted we can fetch the metadata from our contract\n       * and set it in state to move onto the Arena\n       */\n      if (gameContract) {\n        const characterNFT = await gameContract.checkIfUserHasNFT();\n        console.log('CharacterNFT: ', characterNFT);\n        setCharacterNFT(transformCharacterData(characterNFT));\n      }\n    };\n\n    if (gameContract) {\n      getCharacters();\n\n      /*\n       * Setup NFT Minted Listener\n       */\n      gameContract.on('CharacterNFTMinted', onCharacterMint);\n    }\n\n    return () => {\n      /*\n       * When your component unmounts, let;s make sure to clean up this listener\n       */\n      if (gameContract) {\n        gameContract.off('CharacterNFTMinted', onCharacterMint);\n      }\n    };\n  }, [gameContract, setCharacterNFT]);\n\n  // Actions\n  const mintCharacterNFTAction = (characterId) => async () => {\n    try {\n      if (gameContract) {\n        /*\n         * Show our loading indicator\n         */\n        setMintingCharacter(true);\n        console.log('Minting character in progress...');\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\n        await mintTxn.wait();\n        console.log('mintTxn:', mintTxn);\n        /*\n         * Hide our loading indicator when minting is finished\n         */\n        setMintingCharacter(false);\n      }\n    } catch (error) {\n      console.warn('MintCharacterAction Error:', error);\n      /*\n       * If there is a problem, hide the loading indicator as well\n       */\n      setMintingCharacter(false);\n    }\n  };\n\n  // Render Methods\n  const renderCharacters = () =>\n    characters.map((character, index) => (\n      <div className=\"character-item\" key={character.name}>\n        <div className=\"name-container\">\n          <p>{character.name}</p>\n        </div>\n        <img src={character.imageURI} alt={character.name} />\n        <button\n          type=\"button\"\n          className=\"character-mint-button\"\n          disabled={mintingCharacter}\n          onClick={mintCharacterNFTAction(index)}\n        >\n          {mintingCharacter ? 'Minting...' : `Mint ${character.name}`}\n        </button>\n      </div>\n    ));\n\n  return (\n    <div className=\"select-character-container\">\n      <h2>Mint Your Hero. Choose wisely.</h2>\n\n      {/* Only show our loading state if mintingCharacter is true */}\n      {mintingCharacter ? (\n        <div className=\"loading\">\n          <div className=\"indicator\">\n            <LoadingIndicator />\n            <p>Minting In Progress...</p>\n          </div>\n          <img\n            src=\"https://media2.giphy.com/media/61tYloUgq1eOk/giphy.gif?cid=ecf05e47dg95zbpabxhmhaksvoy8h526f96k4em0ndvx078s&rid=giphy.gif&ct=g\"\n            alt=\"Minting loading indicator\"\n          />\n        </div>\n      ) : (\n        <>\n          {/* Only show this when there are characters in state */}\n          {characters.length > 0 && (\n            <div className=\"character-grid\">{renderCharacters()}</div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default SelectCharacter;\n","import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport nftGame from '../../utils/NftGame.json';\nimport './Arena.css';\nimport LoadingIndicator from '../LoadingIndicator';\n\n/*\n * We pass in our characterNFT metadata so we can a cool card in our UI\n */\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\n  // State\n  const [gameContract, setGameContract] = useState(null);\n  /*\n   * State that will hold our boss metadata\n   */\n  const [boss, setBoss] = useState(null);\n  const [attackState, setAttackState] = useState('');\n  const [showToast, setShowToast] = useState(false);\n\n  // UseEffects\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        nftGame.abi,\n        signer\n      );\n\n      setGameContract(contract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []);\n\n  useEffect(() => {\n    /*\n     * Setup async function that will get the boss from our contract and sets in state\n     */\n    const fetchBoss = async () => {\n      const bossTxn = await gameContract.getBigBoss();\n      console.log('Boss:', bossTxn);\n      setBoss(transformCharacterData(bossTxn));\n    };\n\n    if (gameContract) {\n      /*\n       * gameContract is ready to go! Let's fetch our boss\n       */\n      fetchBoss();\n    }\n  }, [gameContract]);\n\n  // UseEffects\n  useEffect(() => {\n    const fetchBoss = async () => {\n      const bossTxn = await gameContract.getBigBoss();\n      console.log('Boss:', bossTxn);\n      setBoss(transformCharacterData(bossTxn));\n    };\n\n    /*\n     * Setup logic when this event is fired off\n     */\n    const onAttackComplete = (newBossHp, newPlayerHp) => {\n      const bossHp = newBossHp.toNumber();\n      const playerHp = newPlayerHp.toNumber();\n\n      console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\n\n      /*\n       * Update both player and boss Hp\n       */\n      setBoss((prevState) => {\n        return { ...prevState, hp: bossHp };\n      });\n\n      setCharacterNFT((prevState) => {\n        return { ...prevState, hp: playerHp };\n      });\n    };\n\n    if (gameContract) {\n      fetchBoss();\n      gameContract.on('AttackComplete', onAttackComplete);\n    }\n\n    /*\n     * Make sure to clean up this event when this component is removed\n     */\n    return () => {\n      if (gameContract) {\n        gameContract.off('AttackComplete', onAttackComplete);\n      }\n    };\n  }, [gameContract, setCharacterNFT]);\n\n  // Actions\n  const runAttackAction = async () => {\n    try {\n      if (gameContract) {\n        setAttackState('attacking');\n        console.log('Attacking boss...');\n        const attackTxn = await gameContract.attackBoss();\n        await attackTxn.wait();\n        console.log('attackTxn:', attackTxn);\n        setAttackState('hit');\n        /*\n         * Set your toast state to true and then false 5 seconds later\n         */\n        setShowToast(true);\n        setTimeout(() => {\n          setShowToast(false);\n        }, 5000);\n      }\n    } catch (error) {\n      console.error('Error attacking boss:', error);\n      setAttackState('');\n    }\n  };\n\n  return (\n    <div className=\"arena-container\">\n      {/* Add your toast HTML right here */}\n      {boss && characterNFT && (\n        <div id=\"toast\" className={showToast ? 'show' : ''}>\n          <div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\n        </div>\n      )}\n\n      {/* Boss */}\n      {boss && (\n        <div className=\"boss-container\">\n          <div className={`boss-content  ${attackState}`}>\n            <h2>🔥 {boss.name} 🔥</h2>\n            <div className=\"image-content\">\n              <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\n              <div className=\"health-bar\">\n                <progress value={boss.hp} max={boss.maxHp} />\n                <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\n              </div>\n            </div>\n          </div>\n          {attackState === 'attacking' ? (\n            <div className=\"loading-indicator\">\n              <LoadingIndicator />\n              <p>Attacking ⚔️</p>\n            </div>\n          ) : (\n            <div className=\"attack-container\">\n              <button className=\"cta-button\" onClick={runAttackAction}>\n                {`💥 Attack ${boss.name}`}\n              </button>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Character NFT */}\n      {characterNFT && (\n        <div className=\"players-container\">\n          <div className=\"player-container\">\n            <h2>Your Character</h2>\n            <div className=\"player\">\n              <div className=\"image-content\">\n                <h2>{characterNFT.name}</h2>\n                <img\n                  src={characterNFT.imageURI}\n                  alt={`Character ${characterNFT.name}`}\n                />\n                <div className=\"health-bar\">\n                  <progress value={characterNFT.hp} max={characterNFT.maxHp} />\n                  <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\n                </div>\n              </div>\n              <div className=\"stats\">\n                <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\n              </div>\n            </div>\n          </div>\n          {/* <div className=\"active-players\">\n            <h2>Active Players</h2>\n            <div className=\"players-list\">{renderActivePlayersList()}</div>\n          </div> */}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Arena;\n","import React, { useEffect, useState } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\n\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from './constants';\nimport nftGame from './utils/NftGame.json';\nimport LoadingIndicator from './Components/LoadingIndicator';\nimport SelectCharacter from './Components/SelectCharacter';\nimport Arena from './Components/Arena';\n\n// Constants\nconst TWITTER_HANDLE = 'zh';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  const [rightNetwork, setRightNetwork] = useState(false);\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [characterNFT, setCharacterNFT] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  /*\n   * Since this method will take some time, make sure to declare it as async\n   */\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log('Make sure you have MetaMask!');\n        /*\n         * We set isLoading here because we use return in the next line\n         */\n        setIsLoading(false);\n        return;\n      } else {\n        console.log('We have the ethereum object', ethereum);\n\n        let chainId = await ethereum.request({ method: 'eth_chainId' });\n        console.log('Connected to chain ' + chainId);\n        // String, hex code of the chainId of the Rinkebey test network\n        const rinkebyChainId = '0x4';\n        setRightNetwork(chainId === rinkebyChainId);\n        if (chainId !== rinkebyChainId) {\n          setIsLoading(false);\n          return;\n        }\n\n        /*\n         * Check if we're authorized to access the user's wallet\n         */\n        const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n        /*\n         * User can have multiple authorized accounts, we grab the first one if its there!\n         */\n        if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log('Found an authorized account:', account);\n          setCurrentAccount(account);\n        } else {\n          console.log('No authorized account found');\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    /*\n     * We release the state property after all the function logic\n     */\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    /*\n     * Anytime our component mounts, make sure to immiediately set our loading state\n     */\n    setIsLoading(true);\n    checkIfWalletIsConnected();\n  }, []);\n\n  /*\n   * Add this useEffect right under the other useEffect where you are calling checkIfWalletIsConnected\n   */\n  useEffect(() => {\n    /*\n     * The function we will call that interacts with out smart contract\n     */\n    const fetchNFTMetadata = async () => {\n      console.log('Checking for Character NFT on address:', currentAccount);\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        nftGame.abi,\n        signer\n      );\n\n      const txn = await gameContract.checkIfUserHasNFT();\n      console.log('NFT: ', txn);\n      if (txn.name) {\n        const transformedData = transformCharacterData(txn);\n        if (transformedData.hp > 0) {\n          console.log('User has character NFT');\n          setCharacterNFT(transformedData);\n        } else {\n          console.log('Characted NFT is dead, mint a new one.');\n        }\n      } else {\n        console.log('No character NFT found');\n      }\n\n      /*\n       * Once we are done with all the fetching, set loading state to false\n       */\n      setIsLoading(false);\n    };\n\n    /*\n     * We only want to run this, if we have a connected wallet\n     */\n    if (currentAccount) {\n      console.log('CurrentAccount:', currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n\n  /*\n   * Implement your connectWallet method here\n   */\n  const connectWalletAction = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log('Get MetaMask!');\n        return;\n      }\n\n      /*\n       * Fancy method to request access to account.\n       */\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n\n      /*\n       * Boom! This should print out public address once we authorize Metamask.\n       */\n      console.log('Connected', accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Render Methods\n  const renderContent = () => {\n    /*\n     * If the app is currently loading, just render out LoadingIndicator\n     */\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n\n    /*\n     * Not right network 0 return reconnect warning\n     */\n    if (!rightNetwork) {\n      return <p className=\"sub-text\">Please connect to Rinkeby and reload</p>;\n    }\n\n    if (!currentAccount) {\n      return (\n        <div className=\"connect-wallet-container\">\n          <img\n            src=\"https://bestanimations.com/media/star-wars/1472638832star-wars-the-force-awakens-animated-gif-17.gif\"\n            alt=\"Star Wars Heroes\"\n          />\n          <button\n            className=\"cta-button connect-wallet-button\"\n            onClick={connectWalletAction}\n          >\n            Connect Wallet To Get Started\n          </button>\n        </div>\n      );\n    } else if (currentAccount && !characterNFT) {\n      return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\n      /*\n       * If there is a connected wallet and characterNFT, it's time to battle!\n       */\n    } else if (currentAccount && characterNFT) {\n      return (\n        <Arena characterNFT={characterNFT} setCharacterNFT={setCharacterNFT} />\n      );\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">Star Wars Heroes</p>\n          <p className=\"sub-text\">Team up to fight the dark force!</p>\n          <div className=\"connect-wallet-container\">{renderContent()}</div>\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}